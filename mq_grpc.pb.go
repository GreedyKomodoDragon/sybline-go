// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: mq.proto

package handler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MQEndpointsClient is the client API for MQEndpoints service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MQEndpointsClient interface {
	GetMessages(ctx context.Context, in *RequestMessageData, opts ...grpc.CallOption) (*MessageCollection, error)
	SubmitMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*Status, error)
	CreateQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*Status, error)
	Ack(ctx context.Context, in *AckUpdate, opts ...grpc.CallOption) (*Status, error)
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error)
	ChangePassword(ctx context.Context, in *ChangeCredentials, opts ...grpc.CallOption) (*Status, error)
	Nack(ctx context.Context, in *AckUpdate, opts ...grpc.CallOption) (*Status, error)
	DeleteQueue(ctx context.Context, in *DeleteQueueInfo, opts ...grpc.CallOption) (*Status, error)
	AddRoutingKey(ctx context.Context, in *AddRoute, opts ...grpc.CallOption) (*Status, error)
	DeleteRoutingKey(ctx context.Context, in *DeleteRoute, opts ...grpc.CallOption) (*Status, error)
	CreateUser(ctx context.Context, in *UserCreds, opts ...grpc.CallOption) (*Status, error)
	SubmitBatchedMessages(ctx context.Context, in *BatchMessages, opts ...grpc.CallOption) (*Status, error)
	IsLeaderNode(ctx context.Context, in *LeaderNodeRequest, opts ...grpc.CallOption) (*Status, error)
	DeleteUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Status, error)
	BatchAck(ctx context.Context, in *BatchAckUpdate, opts ...grpc.CallOption) (*Status, error)
	BatchNack(ctx context.Context, in *BatchNackUpdate, opts ...grpc.CallOption) (*Status, error)
	LogOut(ctx context.Context, in *LogOutRequest, opts ...grpc.CallOption) (*LogOutResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error)
	UnassignRole(ctx context.Context, in *UnassignRoleRequest, opts ...grpc.CallOption) (*UnassignRoleResponse, error)
}

type mQEndpointsClient struct {
	cc grpc.ClientConnInterface
}

func NewMQEndpointsClient(cc grpc.ClientConnInterface) MQEndpointsClient {
	return &mQEndpointsClient{cc}
}

func (c *mQEndpointsClient) GetMessages(ctx context.Context, in *RequestMessageData, opts ...grpc.CallOption) (*MessageCollection, error) {
	out := new(MessageCollection)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) SubmitMessage(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/SubmitMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) CreateQueue(ctx context.Context, in *QueueInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) Ack(ctx context.Context, in *AckUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/Ack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) ChangePassword(ctx context.Context, in *ChangeCredentials, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) Nack(ctx context.Context, in *AckUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/Nack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) DeleteQueue(ctx context.Context, in *DeleteQueueInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) AddRoutingKey(ctx context.Context, in *AddRoute, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/AddRoutingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) DeleteRoutingKey(ctx context.Context, in *DeleteRoute, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/DeleteRoutingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) CreateUser(ctx context.Context, in *UserCreds, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) SubmitBatchedMessages(ctx context.Context, in *BatchMessages, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/SubmitBatchedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) IsLeaderNode(ctx context.Context, in *LeaderNodeRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/IsLeaderNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) DeleteUser(ctx context.Context, in *UserInformation, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) BatchAck(ctx context.Context, in *BatchAckUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/BatchAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) BatchNack(ctx context.Context, in *BatchNackUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/BatchNack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) LogOut(ctx context.Context, in *LogOutRequest, opts ...grpc.CallOption) (*LogOutResponse, error) {
	out := new(LogOutResponse)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) AssignRole(ctx context.Context, in *AssignRoleRequest, opts ...grpc.CallOption) (*AssignRoleResponse, error) {
	out := new(AssignRoleResponse)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/AssignRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQEndpointsClient) UnassignRole(ctx context.Context, in *UnassignRoleRequest, opts ...grpc.CallOption) (*UnassignRoleResponse, error) {
	out := new(UnassignRoleResponse)
	err := c.cc.Invoke(ctx, "/MQ.MQEndpoints/UnassignRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQEndpointsServer is the server API for MQEndpoints service.
// All implementations must embed UnimplementedMQEndpointsServer
// for forward compatibility
type MQEndpointsServer interface {
	GetMessages(context.Context, *RequestMessageData) (*MessageCollection, error)
	SubmitMessage(context.Context, *MessageInfo) (*Status, error)
	CreateQueue(context.Context, *QueueInfo) (*Status, error)
	Ack(context.Context, *AckUpdate) (*Status, error)
	Login(context.Context, *Credentials) (*Status, error)
	ChangePassword(context.Context, *ChangeCredentials) (*Status, error)
	Nack(context.Context, *AckUpdate) (*Status, error)
	DeleteQueue(context.Context, *DeleteQueueInfo) (*Status, error)
	AddRoutingKey(context.Context, *AddRoute) (*Status, error)
	DeleteRoutingKey(context.Context, *DeleteRoute) (*Status, error)
	CreateUser(context.Context, *UserCreds) (*Status, error)
	SubmitBatchedMessages(context.Context, *BatchMessages) (*Status, error)
	IsLeaderNode(context.Context, *LeaderNodeRequest) (*Status, error)
	DeleteUser(context.Context, *UserInformation) (*Status, error)
	BatchAck(context.Context, *BatchAckUpdate) (*Status, error)
	BatchNack(context.Context, *BatchNackUpdate) (*Status, error)
	LogOut(context.Context, *LogOutRequest) (*LogOutResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error)
	UnassignRole(context.Context, *UnassignRoleRequest) (*UnassignRoleResponse, error)
	mustEmbedUnimplementedMQEndpointsServer()
}

// UnimplementedMQEndpointsServer must be embedded to have forward compatible implementations.
type UnimplementedMQEndpointsServer struct {
}

func (UnimplementedMQEndpointsServer) GetMessages(context.Context, *RequestMessageData) (*MessageCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMQEndpointsServer) SubmitMessage(context.Context, *MessageInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMessage not implemented")
}
func (UnimplementedMQEndpointsServer) CreateQueue(context.Context, *QueueInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedMQEndpointsServer) Ack(context.Context, *AckUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedMQEndpointsServer) Login(context.Context, *Credentials) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMQEndpointsServer) ChangePassword(context.Context, *ChangeCredentials) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedMQEndpointsServer) Nack(context.Context, *AckUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedMQEndpointsServer) DeleteQueue(context.Context, *DeleteQueueInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedMQEndpointsServer) AddRoutingKey(context.Context, *AddRoute) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutingKey not implemented")
}
func (UnimplementedMQEndpointsServer) DeleteRoutingKey(context.Context, *DeleteRoute) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingKey not implemented")
}
func (UnimplementedMQEndpointsServer) CreateUser(context.Context, *UserCreds) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMQEndpointsServer) SubmitBatchedMessages(context.Context, *BatchMessages) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBatchedMessages not implemented")
}
func (UnimplementedMQEndpointsServer) IsLeaderNode(context.Context, *LeaderNodeRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeaderNode not implemented")
}
func (UnimplementedMQEndpointsServer) DeleteUser(context.Context, *UserInformation) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMQEndpointsServer) BatchAck(context.Context, *BatchAckUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAck not implemented")
}
func (UnimplementedMQEndpointsServer) BatchNack(context.Context, *BatchNackUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchNack not implemented")
}
func (UnimplementedMQEndpointsServer) LogOut(context.Context, *LogOutRequest) (*LogOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedMQEndpointsServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMQEndpointsServer) AssignRole(context.Context, *AssignRoleRequest) (*AssignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRole not implemented")
}
func (UnimplementedMQEndpointsServer) UnassignRole(context.Context, *UnassignRoleRequest) (*UnassignRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRole not implemented")
}
func (UnimplementedMQEndpointsServer) mustEmbedUnimplementedMQEndpointsServer() {}

// UnsafeMQEndpointsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MQEndpointsServer will
// result in compilation errors.
type UnsafeMQEndpointsServer interface {
	mustEmbedUnimplementedMQEndpointsServer()
}

func RegisterMQEndpointsServer(s grpc.ServiceRegistrar, srv MQEndpointsServer) {
	s.RegisterService(&MQEndpoints_ServiceDesc, srv)
}

func _MQEndpoints_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).GetMessages(ctx, req.(*RequestMessageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_SubmitMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).SubmitMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/SubmitMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).SubmitMessage(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).CreateQueue(ctx, req.(*QueueInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/Ack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).Ack(ctx, req.(*AckUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeCredentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).ChangePassword(ctx, req.(*ChangeCredentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/Nack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).Nack(ctx, req.(*AckUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).DeleteQueue(ctx, req.(*DeleteQueueInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_AddRoutingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).AddRoutingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/AddRoutingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).AddRoutingKey(ctx, req.(*AddRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_DeleteRoutingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).DeleteRoutingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/DeleteRoutingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).DeleteRoutingKey(ctx, req.(*DeleteRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).CreateUser(ctx, req.(*UserCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_SubmitBatchedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).SubmitBatchedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/SubmitBatchedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).SubmitBatchedMessages(ctx, req.(*BatchMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_IsLeaderNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).IsLeaderNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/IsLeaderNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).IsLeaderNode(ctx, req.(*LeaderNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).DeleteUser(ctx, req.(*UserInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_BatchAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAckUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).BatchAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/BatchAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).BatchAck(ctx, req.(*BatchAckUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_BatchNack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchNackUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).BatchNack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/BatchNack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).BatchNack(ctx, req.(*BatchNackUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).LogOut(ctx, req.(*LogOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_AssignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).AssignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/AssignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).AssignRole(ctx, req.(*AssignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQEndpoints_UnassignRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQEndpointsServer).UnassignRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MQ.MQEndpoints/UnassignRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQEndpointsServer).UnassignRole(ctx, req.(*UnassignRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MQEndpoints_ServiceDesc is the grpc.ServiceDesc for MQEndpoints service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MQEndpoints_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MQ.MQEndpoints",
	HandlerType: (*MQEndpointsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessages",
			Handler:    _MQEndpoints_GetMessages_Handler,
		},
		{
			MethodName: "SubmitMessage",
			Handler:    _MQEndpoints_SubmitMessage_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _MQEndpoints_CreateQueue_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _MQEndpoints_Ack_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _MQEndpoints_Login_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MQEndpoints_ChangePassword_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _MQEndpoints_Nack_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _MQEndpoints_DeleteQueue_Handler,
		},
		{
			MethodName: "AddRoutingKey",
			Handler:    _MQEndpoints_AddRoutingKey_Handler,
		},
		{
			MethodName: "DeleteRoutingKey",
			Handler:    _MQEndpoints_DeleteRoutingKey_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MQEndpoints_CreateUser_Handler,
		},
		{
			MethodName: "SubmitBatchedMessages",
			Handler:    _MQEndpoints_SubmitBatchedMessages_Handler,
		},
		{
			MethodName: "IsLeaderNode",
			Handler:    _MQEndpoints_IsLeaderNode_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MQEndpoints_DeleteUser_Handler,
		},
		{
			MethodName: "BatchAck",
			Handler:    _MQEndpoints_BatchAck_Handler,
		},
		{
			MethodName: "BatchNack",
			Handler:    _MQEndpoints_BatchNack_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _MQEndpoints_LogOut_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _MQEndpoints_CreateRole_Handler,
		},
		{
			MethodName: "AssignRole",
			Handler:    _MQEndpoints_AssignRole_Handler,
		},
		{
			MethodName: "UnassignRole",
			Handler:    _MQEndpoints_UnassignRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}
